package services

import (
	"testing"
	mocks "testing-app/mocks/services"
)

//Using the mocks generated by mockery

func Test_MessageProcessor_Sends_Message(t *testing.T) {
	// Arrange
	mockMessageService := &mocks.MessageService{}

	//configure the mock
	mockMessageService.On("Send", "Hello World").Return(true)
	mp := NewMessageProcessor(mockMessageService)

	// Act
	result := mp.Process("Hello World")

	// Assert
	mockMessageService.AssertExpectations(t)
	if result != true {
		t.Errorf("Expected true but got %v", result)
	}
}

/* type MockMessageService struct {
	isInvoked   bool
	msg         string
	returnValue bool
}

func (s *MockMessageService) Send(msg string) bool {
	s.isInvoked = true
	s.msg = msg
	s.returnValue = true
	return s.returnValue
}

func Test_MessageProcessor_Sends_Message(t *testing.T) {
	// Arrange
	mockMessageService := &MockMessageService{}
	mp := NewMessageProcessor(mockMessageService)

	// Act
	mp.Process("Hello World")

	// Assert
	if mockMessageService.isInvoked == false {
		t.Errorf("Expected message to be sent using the message service")
	}
}

func Test_MessageProcessor_Processes_The_Given_Message(t *testing.T) {
	// Arrange
	mockMessageService := &MockMessageService{}
	mp := NewMessageProcessor(mockMessageService)
	msg := "Hello World"
	// Act
	mp.Process(msg)

	// Assert
	if mockMessageService.msg != msg {
		t.Errorf("Expected the given message to be sent using the message service")
	}
}

func Test_MessageProcessor_Returns_From_MessageService(t *testing.T) {
	// Arrange
	mockMessageService := &MockMessageService{}
	mp := NewMessageProcessor(mockMessageService)
	msg := "Hello World"
	// Act
	result := mp.Process(msg)

	// Assert
	if result != mockMessageService.returnValue {
		t.Errorf("Expected to return the result from the MessageService")
	}
}
*/
