Magesh Kuppan


Schedule:
    Commence    : 9:00 AM
    Tea Break   : 10:45 AM (20 mins)
    Lunch Break : 12:30 PM (1 Hr)
    Tea Break   : 3:00 PM (20 mins)
    Wind up     : 5:00 PM

Methodology:
    No powerpoints
    100% handon driven

About You:
    Name
    Job Title
    Primary Skillset
    Experience in Go (if any)

Software Requirements
    1. Go tools
    2. Visual Studio Code / Goland

GitHub Repo:
    https://github.com/tkmagesh/Salesforce-Go-Jul-2022

Recordings:
    https://forms.gle/gTJwnshuJWAk3u6z9



Day-1
    Why Go?

        1. Performance
            On par with C++
            No VM

        2. Concurrency
            Ability to have more than one execution path in an application
            Represented as a goroutine
            Only 4KB for a goroutine
            Scheduling the goroutines is taken care by the schedule (built in the application)
            Go language is built for concurrency
            Language features:
                go, chan (data type), <- (channel operator), range, select
            Apis
                sync package
                sync/atomic packages

        3. Simplicity
            ONLY 25 keywords
                - No access modifiers
                - No classes (only structs)
                - No inheritance (only composition)
                - No exceptions (only errors)
                - No reference types (everything is a value)
                - No implicit type conversion
                - No pointer arithmetic

Paradox of Choice (Barry Schwartz)
    https://www.youtube.com/watch?v=VO6XEQIsCoM&t=12s






To run a go program
    go run hello-world.go 

To create a build
    go build <program.go>
    go build -o <binary_name> <program.go>

The list of other platform configurations can be found at :
        https://go.dev/doc/install/source#environment

 To change the default environment variables
        go env -w GOOS=linux GOARCH=amd64
        go build -o <build_filename> <filename.go>


Data Types in Go
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real[float32] imaginary[float32])
    complex128 (real[float64] imaginary[float64])

    byte (alias for uint8)
    rune (alias for int32) (unicode code point)

Functions
    variadic functions
    anonymous functions
    higher order functions
        assign functions to variables
        pass functions are arguments to other functions
        return functions as return values from other functions
    deferred functions


Collection
    Array
        fixed size collection of data of the same type

    Slice
        variable size collection of data of the same type
        it is wrapper for an array

    Map
        typed collection of key value pairs


    Modularity
        Modules
            Any code that need to be versioned together
            typically, it is an application
            go.mod file

            creating a mod file
                go mod init <module_name>
                convention => module_name == github.com/tkmagesh/myapp

            To run a module
                go run .
            
            to create a build
                go build .
                go build -o <binary_name> .

            to install a 3rd party module
                go get github.com/fatih/color

            to updated the mod file
                go mod tidy

            to localize the dependencies
                go mod vendor

            Other mod commands
                go mod graph
                go mod why

            Reference:
                https://go.dev/ref/mod

                
        Packages
            logical grouping of the code


    In the absence of modules
        $GOPATH
            bin
            pkg
            src
                github.com
                    tkmagesh
                        calculator
                            add.go
                            subtract.go


Concurrency
    Data Race Detection
        go run --race demo-08.go 

        ch <- 100 (send operation)
        data := <- ch (receive operation)

    Channels 
        A receive operation is ALWAYS a blocking operation
        A send operation is blocked until a 'receive' operation is initiated (conditions apply)
            in other words, a 'send' operation will be successful ONLY if the 'receive' operation is already initiated